
-- Unnamed project
-- Ishido (ishido.uu@gmail.com), 2013
-- Main script

gamestate = require "hump.gamestate"
vector = require "hump.vector"
hc = require "HardonCollider"

level = {}
objects = {}
hold = {0, 0, 0, 0}

g = -500

-- Collisions

-- States: 0 - floating, 1 - standing, 2 - walking, 3 - running

function on_collide(dt, shape_one, shape_two, dx, dy)
  if shape_one == player or shape_two == player then
    if shape_one == player then
      other = shape_two
      ddx, ddy = dx, dy
    else
      other = shape_one
      ddx, ddy = -dx, -dy
    end
    x1, y1, x2, y2  = other:bbox()
    px, py = player:center()
    x3, y3, x4, y4 = player:bbox()
    z1, z2, h1, h2 = other.z, player.z, other.h, player.h
    --player:move(ddx, ddy)	-- Remove collision
    if z1+h1 > z2 then
      player.z = z1+h1
      player.vspeed = 0
      if player.state == 0 then player.state = player.prevstate end	-- Return previous state
      if player.state == 1 then player.vel = player.vel * 0.94 end	-- Add friction
    end
  end
end

function end_collide(dt, shape_one, shape_two, dx, dy)
  
end

-- On-level functions

function level:keypressed(key)
  if key == 'left' then
    player.delta = player.delta + vector(-1, 0)
    if player.state ~= 0 then player.state = 2 end
    hold[1] = 1
  end
  if key == 'right' then
    player.delta = player.delta + vector(1, 0)
    if player.state ~= 0 then player.state = 2 end
    hold[2] = 1
  end
  if key == 'up' then
    player.delta = player.delta + vector(0, -1)
    if player.state ~= 0 then player.state = 2 end
    hold[3] = 1
  end
  if key == 'down' then
    player.delta = player.delta + vector(0, 1)
    if player.state ~= 0 then player.state = 2 end
    hold[4] = 1
  end
  player.delta = player.delta:normalized()
  if key == ' ' and player.state ~= 0 then
    player.prevstate = player.state
    player.state = 0
    player.vspeed = player.vspeed - 300
  end
end

function level:keyreleased(key)
  if key=='left' then  	hold[1] = 0 player.delta = player.delta - vector(-0.5, 0) end
  if key=='right' then 	hold[2] = 0 player.delta = player.delta - vector(0.5, 0) end
  if key=='up' then 	hold[3] = 0 player.delta = player.delta - vector(0, -0.5) end
  if key=='down' then 	hold[4] = 0 player.delta = player.delta - vector(0, 0.5) end
  player.delta = player.delta:normalized()
  if key == 'up' or key == 'down' or key == 'left' or key == 'right' then
    sum = 0
    for k, v in pairs(hold) do sum = sum + v end
    if sum == 0 then
      player.delta = vector(0, 0)
      if player.state > 1 then 
        player.state = 1 
      end
      player.prevstate = 1
    end
  end
end

function level:init()
  player = collider:addRectangle(300, 200, 48, 32)
  player.vel = vector(0, 0)	-- Player is not moving
  player.delta = vector(0, 0)
  player.z = 24
  player.h = 48
  player.vspeed, player.spx, player.spy = 0
  player.state = 0	-- Player is in the air
  player.prevstate = 1	-- Player will be standing after falling
  player.maxspeed = 300
  player.maxvspeed = -800
  
  ground = collider:addRectangle(200, 100, 400, 400)
  ground.z = -24
  ground.h = 24
  
  cube = collider:addRectangle(400, 100, 200, 100)
  cube.z = 0
  cube.h = 64
end

function level:enter()
  
end

function drawbox(object)
  x1, y1, x2, y2 = object:bbox()
  w = x2-x1
  h = y2-y1+object.h
  love.graphics.rectangle('line', x1, y1-object.h-object.z, w, h)
  love.graphics.line(x1, y2-object.h-object.z, x2, y2-object.h-object.z)
end

function level:draw()
  drawbox(player)
  drawbox(ground)
  drawbox(cube)
end

function level:update(dt)
  if player.vspeed ~= 0 then player.state = 0 end
  player.vspeed = player.vspeed + g * dt
  if player.state > 1 then player.vel = player.vel + player.delta * 35 end	 -- Add velocity
  player:move((player.vel * dt):unpack())
  player.z = player.z + player.vspeed * dt
  if player.vspeed < player.maxvspeed then player.vspeed = player.maxvspeed end
  if player.vel:len() > player.maxspeed then player.vel = player.vel:normalized() * player.maxspeed end	--Set maximum speed
end

-- Engine functions

function love.load()
  collider = hc(100, on_collide, end_collide)
  gamestate.registerEvents({'keypressed', 'keyreleased'})
  gamestate.switch(level)
  --font = love.graphics.newImageFont('font_01.png', 'abcdefghijklmnopqrstuvwxyz!?.;,"`()1234567890')
  --love.graphics.setFont(font)
end

function debug_draw()
  love.graphics.print('Unnamed project\nPlayer state: ' .. player.state, 32, 32)
end

function love.draw()
  gamestate.draw()
  debug_draw()
end

function love.update(dt)
  gamestate.update(dt)
  collider:update(dt)
end